# -*- org-export-babel-evaluate: nil; -*-
#+title: 軟體測試方法
#+date: <2020-01-27 一 13:55>
#+author: lagagain
#+options: toc:nil
#+export_file_name: ../docs/軟體測試方法

這個看完[[https://ellis-wu.github.io/2015/09/04/test-method-introduction/][軟體測試方法]]的筆記。原本只是剪剪貼貼，改一下成我理解的順序，要再做之後的整理，但由於我不清楚原本的授權，所以只留在 gist 給自己參考，這邊就只留下測試名稱，或再以自己方式敘述，以及之後尋找的資源做補充整理。

* 測試方法

** 自動化測試

*** 單元測試
*** 整合測試
*** 回歸測試
*** 端到端測試
*** 驗收測試
    :LOGBOOK:
    - Note taken on [2020-01-27 一 13:44] \\
      這似乎不算是自動化測試？
    :END:
** ɑ, β 測試
*** α 測試(Alpha testing)
*** β 測試(Beta testing)
*** 可移植性測試(Portability testing)：
*** 封測
*** 公測
** 靜態分析&動態分析
*** 靜態分析
*** 動態分析
** UI 測試
** 冒煙測試

   Smoke Testing 這個詞，是由電路板測試得來的，當電路板完成之後，會先通電來進行測試，如果電路板沒有冒煙再進行其它測試，如果冒煙了就說明這個電路板連基本的功能都沒達到，其他功能則不必再繼續測試。[fn:1]

#+begin_example
於每日構建(Nightly build)，構建伺服器首先從CVS伺服器上，下載最新的源代碼，然後編譯單元測試，運行單元測試通過後，編譯可執行文件，可執行文件若可運行，並能執行最基本的功能，則認為通過了冒煙測試，這時，構建伺服器會把程序打包成安裝文件，然後上傳到內部網站。

第二天一早，測試人員來了以後，會收到構建伺服器發來的郵件提示昨晚是否構建成功。若構建成功，則測試人員進行相關的功能測試。
#+end_example

** 隨機測試

#+begin_example
我來試試看如果當聽音樂時打電話進來會發生什麼事？
任意調整視窗大小
#+end_example


** 白箱,黑箱測試

*** 白箱測試

白箱測試時，測試人員必須掌握程式原始碼，瞭解其內部運作，包含資料流程以及程式控制流程。

*** 黑箱測試

** 壓力/負載/效能測試

*** 效能測試

#+begin_quote
效能測試主要目的在系統的效能是否能符合客戶的需求，因此執行效能測試時，首先需要瞭解客戶的需求為何。
#+end_quote

*** 負載測試

*** 壓力測試

*** 邊界值分析

#+begin_example
輸入一位學生軟體工程成績，成績範圍：0 ~ 100(可輸入最小值為0，可輸入最大值為100)。
所以根據邊界值分析，我們會取-1, 0, 1, 99, 100, 101 來做邊界值測試，之後會再取範圍內的任一值(假設我們取 60)當作確認輸入範圍內的直也為正常。
#+end_example

* 參考資料

- [[https://ellis-wu.github.io/2015/09/04/test-method-introduction/][軟體測試方法]]
- [[https://zh.wikipedia.org/zh-tw/%25E8%25BD%25AF%25E4%25BB%25B6%25E6%25B5%258B%25E8%25AF%2595][維基百科]]
- [[https://kknews.cc/zh-tw/tech/oebkbgo.html][《軟體測試的藝術》讀書筆記]]

* Footnotes

[fn:1] https://www.astralweb.com.tw/smoketesting/
