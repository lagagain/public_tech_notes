#+title: ABCL嘗試筆記
#+date: <2020-01-24 五 02:47>
#+author: lagagain
#+options: toc:nil
#+export_file_name: ../docs/ABCL嘗試筆記

* Hello World(with JSS)
https://gist.github.com/lagagain/082d8b360f4bf1c4c73f9636a3757a18

#+name: hello.lisp
#+begin_src lisp
  (require :abcl-contrib)
  (require :jss)

  (let ((System.out #"System.out"))
    (jcall "println" System.out "Hello, World"))

  (jcall "println" #"java.lang.System.out" "Hello, World")
  (jcall "println" #"System.out" "Hello, Java")

  (jclass-methods (jclass "java.lang.System"))
  (jclass-methods (jobject-class "java.lang.System.out"))

  (let ((obj #"java.lang.System.out"))
    (print obj)
    (jclass-methods (jclass-of obj)))
#+end_src


* JAVA GUI / ABCL GUI

GitHub Gist: https://gist.github.com/lagagain/648c7e1e8e958db8bd00eb7088230d3d

#+name: abcl.cl
#+begin_src lisp
(defun main ()
  (let* ((JFrame (jclass "javax.swing.JFrame"))
         (JButton (jclass "javax.swing.JButton"))
         (BorderLayout (jclass "java.awt.BorderLayout"))
         (demo (jnew JFrame "Layout Demo"))
         (east (jnew JButton "East"))
         (south (jnew JButton "South"))
         (west (jnew JButton "West"))
         (north (jnew JButton "North"))
         (center (jnew JButton "Center")))
    (jcall "setSize" demo 300 300)
    (jcall "setDefaultCloseOperation" demo (jfield JFrame "EXIT_ON_CLOSE"))
    (jcall "setLayout" (jcall "getContentPane" demo) (jnew BorderLayout))

    (jcall "add" demo east (jfield BorderLayout "EAST"))
    (jcall "add" demo south (jfield BorderLayout "SOUTH"))
    (jcall "add" demo west (jfield BorderLayout "WEST"))
    (jcall "add" demo north (jfield BorderLayout "NORTH"))
    (jcall "add" demo center (jfield BorderLayout "CENTER"))

    (jcall "setVisible" demo t)
    ))

(main)
#+end_src


#+name: gui.java
#+begin_src java :tangle
//ref: https://dotblogs.com.tw/alex_space/2016/09/23/142234

import javax.swing.*;
import java.awt.*;

public class GUI {

    public static void main(String[] args) {

        JFrame demo = new JFrame("Layout Demo");
        demo.setSize(300, 300);
        demo.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        demo.getContentPane().setLayout(new BorderLayout());

        JButton east = new JButton("East");
        JButton south = new JButton("South");
        JButton west = new JButton("West");
        JButton north = new JButton("North");
        JButton center = new JButton("Center");

        demo.add(east, BorderLayout.EAST);
        demo.add(south, BorderLayout.SOUTH);
        demo.add(west, BorderLayout.WEST);
        demo.add(north, BorderLayout.NORTH);
        demo.add(center, BorderLayout.CENTER);

        demo.setVisible(true);
    }
}
#+end_src

* JavaFX example

#+name: javafx_hello.java
#+begin_src java
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class HelloFX extends Application {

    @Override
    public void start(Stage stage) {
        String javaVersion = System.getProperty("java.version");
        String javafxVersion = System.getProperty("javafx.version");
        Label l = new Label("Hello, JavaFX " + javafxVersion + ", running on Java " + javaVersion + ".");
        Scene scene = new Scene(new StackPane(l), 640, 480);
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch();
    }

}
#+end_src


不知道為什麼`javafx.scene.control`裡的物件類別回傳的是 nil
#+begin_src lisp javafx_Hello.lisp
  (require :abcl-contrib)
  (require :jss)
  ;; (require :jna)

  (jstatic "getProperty" "java.lang.System" "java.library.path")
  ;; (jstatic "setProperty" "java.lang.System" "java.library.path" (namestring (first (uiop:directory* "./lib/"))))


  ;; add classpath
  (let (libs)
    (setf libs
          ;; (make-pathname :name :wild :directory '(:relative "lib") :type "jar")
          (loop for file in (directory "lib/*.jar")
                do
                   (setf file (namestring file))
                   (print file)
                collect file))
    (add-to-classpath libs))

  ;; load dll
  ;; note: some library can't load
  ;;
  ;; (let ((*standard-output* *standard-output*))
  ;;   (loop for file in (uiop:directory-files "lib/")
  ;;         do
  ;;            (setf file (namestring file))
  ;;         when (jstatic "matches" "java.util.regex.Pattern" ".*\\.so" file)
  ;;           do
  ;;              (restart-case (progn
  ;;                              (format t "load ~A~%" (file-namestring file))
  ;;                              (jstatic "load" (jclass "java.lang.System") file)
  ;;                              (format t "~&Success~%"))
  ;;                (continue nil
  ;;                  (continue))
  ;;                (stop nil
  ;;                  (return)))))

  (let ((*standard-output* *standard-output*))
    (loop for file in (directory "lib/*.so")
          do
             (tagbody
                (setf file (file-namestring file))
                (setf file (subseq file 3 (- (length file) 3)))
              load-library
                (restart-case (progn
                                (format t "load ~A~%" file)
                                (jstatic "loadLibrary" (jclass "java.lang.System") file)
                                (format t "~&Success~%"))
                  (continue nil
                    (continue))
                  (try-again nil
                    (go load-library))
                  (try-load-other-file (new-file)
                    :interactive (lambda nil (format t "Input Other name: ")
                                   (list (read-line)))
                    (setf file new-file)
                    (go load-library))
                  (set-new-search-path (path)
                    :report "Set New Search Path"
                    :interactive (lambda nil (format t "Input New Search Path: ")
                                   (list (read-line)))
                    (format t "New search path is: ~A~%" path)
                    (jstatic "setProperty" "java.lang.System" "java.library.path" path))
                  (stop nil
                    (return)))))


  (jclass "javafx.scene.control.Label")



  (defconstant +application+ (jclass "javafx.application.Application"))
  (defconstant +scene+ (jclass "javafx.scene.Scene"))
  (defconstant +label+ (jclass "javafx.scene.control.Label"))
  (defconstant +StackPane+ (jclass "javafx.scene.layout.StackPane"))
  (defconstant +stage+ (jclass "javafx.stage.Stage"))
  (defconstant +group+ (jclass "javafx.scene.Group"))



  (let* ((HelloFX (jnew-runtime-class "HelloFX"
                                      :superclass "javafx.application.Application"
                                      :methods `(("main" :void ()
                                                         (lambda (this)
                                                           (jcall "launch" this)))
                                                 ("start" :void ("javafx.stage.Stage")
                                                          (lambda (this stage)
                                                            (prog* ((java-version "Example")
                                                                    (javafx-version "Example")
                                          ;(l (jnew +label+ (format nil "Hello, JavaFX ~A , running on Java ~A." javafx-version java-version)))
                                          ;(scene (jnew +scene+ (jnew +stackpane+ 1) 640 480))
                                                                    (root (jnew +group+))
                                                                    (scene (jnew +scene+ root 300 300)))
                                                               (jcall "setScene" stage scene)
                                                               (jcall "show" stage)))))
                                      :access-flags '(:public))))
    (jstatic "launch" +application+ HelloFX (jnew-array "java.lang.String" 1)))

  (let* ((HelloFX (jnew-runtime-class "HelloFX"
                                      :superclass "javafx.application.Application"
                                      :methods `(("main" :void ()
                                                         (lambda (this)
                                                           (jcall "launch" this)))
                                                 ("start" :void ("javafx.stage.Stage")
                                                          (lambda (this (stage +stage+))
                                                            (prog ((java-version "Example")
                                                                   (javafx-version "Example")
                                                                   (l (jnew +label+ (format nil "Hello, JavaFX ~A , running on Java ~A." javafx-version java-version)))
                                                                   (scene (jnew +scene+ (jnew +stackpane+ 1) 640 480)))
                                                               (jcall "setScene" stage scene)
                                                               (jcall "show" stage)))))
                                      :access-flags '(:public)))
         (app (jnew HelloFX)))
    (jcall "raunch" app ))
  (require :abcl-contrib)
  (require :jss)

  (defconstant +javafx-based-path+ "/home/john/coding/Java/classes/javafx-sdk-11.0.2/lib/javafx.base.jar")
  (defconstant +javafx-controls-path+ "/home/john/coding/Java/classes/javafx-sdk-11.0.2/lib/javafx.controls.jar")
  (defconstant +javafx-graphics-path+ "/home/john/coding/Java/classes/javafx-sdk-11.0.2/lib/javafx.graphics.jar")
  (defconstant +javafx-fxml-path+ "/home/john/coding/Java/classes/javafx-sdk-11.0.2/lib/javafx.fxml.jar")
  (defconstant +javafx-media-path+ "/home/john/coding/Java/classes/javafx-sdk-11.0.2/lib/javafx.media.jar")
  (defconstant +javafx-properties-path+ "/home/john/coding/Java/classes/javafx-sdk-11.0.2/lib/javafx.properties.jar")
  (defconstant +javafx-swing-path+ "/home/john/coding/Java/classes/javafx-sdk-11.0.2/lib/javafx.swing.jar")
  (defconstant +javafx-swt-path+ "/home/john/coding/Java/classes/javafx-sdk-11.0.2/lib/javafx-swt.jar")
  (defconstant +javafx-web-path+ "/home/john/coding/Java/classes/javafx-sdk-11.0.2/lib/javafx.web.jar")

  (add-to-classpath `(,+javafx-controls-path+
                      ,+javafx-based-path+
                      ,+javafx-graphics-path+
                      ,+javafx-fxml-path+
                      ,+javafx-media-path+
                      ,+javafx-swing-path+
                      ,+javafx-swt-path+
                      ,+javafx-web-path+))

  (defconstant +application+ (jclass "javafx.application.Application"))
  (defconstant +scene+ (jclass "javafx.scene.Scene"))
  (defconstant +label+ (jclass "javafx.scene.control.Label"))
  (defconstant +StackPane+ (jclass "javafx.scene.layout.StackPane"))
  (defconstant +stage+ (jclass "javafx.stage.Stage"))
  (defconstant +group+ (jclass "javafx.scene.Group"))

  (defvar *tmp*)

  (let* ((HelloFX (jnew-runtime-class "HelloFX"
                                      :superclass "javafx.application.Application"
                                      :methods `(("main" :void ()
                                                         (lambda (this)
                                                           (jcall "launch" this)))
                                                 ("start" :void ("javafx.stage.Stage")
                                                          (lambda (this stage)
                                                            (prog* ((java-version "Example")
                                                                   (javafx-version "Example")
                                                                   ;(l (jnew +label+ (format nil "Hello, JavaFX ~A , running on Java ~A." javafx-version java-version)))
                                          ;(scene (jnew +scene+ (jnew +stackpane+ 1) 640 480))
                                                                   (root (jnew +group+))
                                                                   (scene (jnew +scene+ root 300 300)))
                                                               (jcall "setScene" stage scene)
                                                               (jcall "show" stage)))))
                                      :access-flags '(:public))))
    (jstatic "launch" +application+ HelloFX (jnew-array "java.lang.String" 1)))

  ;; (jstatic "launch" +application+ 'string)
  ;; (jstatic "getUserAgentStylesheet" (jclass +application+))
  ;; (jmethod +application+ "getUserAgentStylesheet")
  (require :abcl-contrib)
  (require :jss)

  (defconstant +javafx-based-path+ "/home/john/coding/Java/classes/javafx-sdk-11.0.2/lib/javafx.base.jar")
  (defconstant +javafx-controls-path+ "/home/john/coding/Java/classes/javafx-sdk-11.0.2/lib/javafx.controls.jar")
  (defconstant +javafx-graphics-path+ "/home/john/coding/Java/classes/javafx-sdk-11.0.2/lib/javafx.graphics.jar")

  (add-to-classpath `(,+javafx-controls-path+ ,+javafx-based-path+ ,+javafx-graphics-path+))

  (defconstant +application+ (jclass "javafx.application.Application"))
  (defconstant +scene+ (jclass "javafx.scene.Scene"))
  (defconstant +label+ (jclass "javafx.scene.control.Label"))
  (defconstant +StackPane+ (jclass "javafx.scene.layout.StackPane"))
  (defconstant +stage+ (jclass "javafx.stage.Stage"))

  (defvar *tmp*)

  (let* ((HelloFX (jnew-runtime-class "HelloFX"
                                      :superclass "javafx.application.Application"
                                      :methods `(("main" :void ()
                                                         (lambda (this)
                                                           (jcall "launch" this)))
                                                 ("start" :void ("javafx.stage.Stage")
                                                          (lambda (this (stage +stage+))
                                                            (prog ((java-version "Example")
                                                                   (javafx-version "Example")
                                                                   (l (jnew +label+ (format nil "Hello, JavaFX ~A , running on Java ~A." javafx-version java-version)))
                                                                   (scene (jnew +scene+ (jnew +stackpane+ 1) 640 480)))
                                                               (jcall "setScene" stage scene)
                                                               (jcall "show" stage)))))
                                      :access-flags '(:public)))
         (app (jnew HelloFX)))
    (jcall "raunch" app ))
#+end_src
